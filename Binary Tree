#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

using namespace std;

vector<int> line_to_vector(string line) {
    int numeric_characters;
    char text_characters;
    vector<int> created_vector;
    stringstream ss(line);
    while (ss >> numeric_characters) {
        created_vector.push_back(numeric_characters);
        ss >> text_characters;
    }
    return created_vector;
}

vector<int> import_vector() {
    string file_name, line;
    cout << "Please enter the input text file name: ";
    cin >> file_name;
    ifstream imported_file(file_name);
    if (!imported_file) {
        cout << "\nError opening txt file" << endl;
        return line_to_vector("0");
    }
    vector<string> file_content;
    while (getline(imported_file, line))
        file_content.push_back(line);
    imported_file.close();
    return line_to_vector(file_content[0]);
}

vector<vector<int>> build_binary_tree(vector<int> number_set) {
    vector<vector<int>> binary_tree(1, vector<int>(4, 0));
    binary_tree[0][0] = number_set[0];
    binary_tree[0][3] = 1;
    for(int i = 1; i < number_set.size(); i++) {
        int level = 2, node_index = 0;
        bool active_comparison = true;
        while(active_comparison == true) {
            if (binary_tree[node_index][1] == 0 && number_set[i] < binary_tree[node_index][0]) {
                binary_tree[node_index][1] = number_set[i];
                active_comparison = false;
            }
            else if (binary_tree[node_index][2] == 0 && number_set[i] > binary_tree[node_index][0]) {
                binary_tree[node_index][2] = number_set[i];
                active_comparison = false;
            }
            else {
                if (number_set[i] < binary_tree[node_index][0])
                    for(float j = 1; j < binary_tree.size(); j++)
                        if (binary_tree[j][0] == binary_tree[node_index][1]) {
                            node_index = j;
                            j = binary_tree.size();
                        }
                if (number_set[i] > binary_tree[node_index][0])
                    for(float j = 1; j < binary_tree.size(); j++)
                        if (binary_tree[j][0] == binary_tree[node_index][2]) {
                            node_index = j;
                            j = binary_tree.size();
                        }
                level += 1;
            }
        }
        cout <<"\nValue: " << number_set[i] << " - Level: " << level;
        
        
        binary_tree.push_back(vector<int>(4, 0));
        binary_tree[binary_tree.size() - 1][0] = number_set[i];
        binary_tree[binary_tree.size() - 1][3] = level;
    }
    return binary_tree;
}

int main() {
    vector<int> number_set = import_vector();
    vector<vector<int>> binary_tree = build_binary_tree(number_set);
    
    cout << "\n\n";
    for(int i = 0; i < binary_tree.size(); i++)
        cout << binary_tree[i][0] << ", ";
    cout << "\n";
    for(int i = 0; i < binary_tree.size(); i++)
        cout << binary_tree[i][1] << ", ";
    cout << "\n";
    for(int i = 0; i < binary_tree.size(); i++)
        cout << binary_tree[i][2] << ", ";
    cout << "\n";
    for(int i = 0; i < binary_tree.size(); i++)
        cout << binary_tree[i][3] << ", ";
    cout << "\n";
    
    
    return 0;
}

// number-list-binary-tree.txt
